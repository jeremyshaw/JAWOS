Sacramento State, Computer Engineering / Computer Science
CpE/CSc 159 Operating System Pragmatics (Fall 2019)
Instructor: W. Chang

OS Kernel Programming Phase 1
OS Bootstrap & Idle Thread


Introduction and Goal

The 'multitasking' capability of an OS is better governed by a timer
device that interrupts the CPU execution of the current a process code
and force it to switch to perform the kernel code. We programmed the
timer event handling exercise in phase 0, and it will be incorporated
into this phase.

The OS will need a process to run when there are no interrupt or any
service events to handle. We will make such a process which acts more
like an idle thread to consumer CPU time.

A simple process (Idle) is to be created outside of the MyOS.dli DRAM
space which ends at byte location 0xdfffff. The code should be copied
over there (starting 0xe00000) and the runtime space (stack) follows
(top of stack at byte location 0xe0ffff).

A process when created the runtime stack is almost empty except for
a set of initial CPU register values as the initial CPU context in
order to locate the process instructions and runtime stack when the
process is loaded. The CPU context as a data structure is call a
trapframe.


Pseudo Code

The pseudo code is given to help construct the 1st OS phase. How a
timer event is handled is also crucial to be incorporated. A process
trapframe is used to achieve the context switching among processes
as well as to and back from the kernel code execution.

To copy the pseudo code, issue a shell command:
   cp ~changw/html/159/1/p-code/*  .
The "dot" means your current directory is the destination so you need
to make sure you have a good subdirectory to do this. Avoid copy-paste
via a web browser or GUI interface since it incurs ctrl-M characters
and causes very strange compiler errors.


Descriptions of p-code Files

entry.S: has code for a process loader and the timer service entry

kernel.c: declares kernel data, Bootstrap(), Scheduler(), and Kernel() (NEED CODING to complete)
ksr.c: kernel service routines, only two to start with (NEED CODING to complete)
proc.c: has Idle() which flickers a dot an the up-left corner (NEED CODING to complete)
tools.c: common untility functions (mostly for the OS kernel) (NEED CODING to complete)

const-type.h: constants and types (NEED CODING to complete)
entry.h: prototypes of those code modules coded in entry.S
ext-data.h: kernel data declared in kernel.c are prototyped here by 'extern'
  so other C programs can include this file to reference (NEED CODING to complete)
ksr.h: prototypes of kernel service routines coded in ksr.c (NEED CODING to complete)
proc.h: prototype of Idle() coded in proc.c (NEED CODING to complete)
spede.h: the include statements needed in the SPEDE library
tools.h: prototypes of common utilities coded in tools.c (NEED CODING to complete)


Deliverables

You can form a team of maximum 3 persons. Mail the instructor the team
name and members. Similar to naming a variable, a team name must not
include a white space or special symbol except a hyphen or underscore.
It is case sensitive.

Submit source files only. Do not submit any additional files whether
it is generated by the compiler or a SPEDE software; i.e., submit all
files end in .c, .h, and .S.

Penalty will be applied if not following the instructions. This includes
incorrect submission and accidental cloberring of others in the dropbox
system. Please do it correctly.

